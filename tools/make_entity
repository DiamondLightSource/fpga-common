#!/usr/bin/env python

from __future__ import print_function

import sys
import os
import types


# Template string for entity.
entity_template_head = '''\
-- Skeleton top level VHDL

library ieee;
use ieee.std_logic_1164.all;

entity %(entity_name)s is
port (
'''

entity_template_declaration = '''\
%(sep)s    %(name)s : %(direction)s %(type)s\
'''

entity_template_tail = '''\

);
end;
'''

xdc_template_line = '''\
set_property PACKAGE_PIN %(location)s [get_ports {%(name)s%(index)s}]
'''

xdc_location_line = '''\
set_property PACKAGE_PIN %(location)s [get_ports {%(name)s%(index)s}]
'''

xdc_iostandard_line = '''\
set_property IOSTANDARD %(iostandard)s [get_ports {%(name)s%(index)s}]
'''

xdc_pullup_line = '''\
set_property PULLUP true [get_ports {%(name)s%(index)s}]
'''


def uncomment_file(file_name, comment):
    line_no = 0
    for line in open(file_name):
        line_no += 1
        line = line.split(comment, 1)[0].rstrip()
        if line:
            yield (line, line_no)

# Splits line into at least the required number of fields, returning defaults to
# fill in any missing fields.
def split_line(line, required, *defaults):
    line = line.split()
    count = len(line)
    assert count >= required, 'Missing fields on line'
    assert count <= required + len(defaults), 'Too many fields on line'
    return line + list(defaults[count - required:])


# Expands strings of the form a{b,c} into ab ac.  Can't cope with nested
# brackets, but can cope with sequences.
def expand_string(string):
    if '{' in string:
        start, tail = string.split('{', 1)
        repeats, tail = tail.split('}', 1)
        for repeat in repeats.split(','):
            for string in expand_string(start + repeat + tail):
                yield string
    else:
        yield string


# Extracts the range part from the name, parses string of form
#
#   name [ "[" range "]" ]
#
# into its two components.  Leaves the range part unprocessed for parsing below.
def parse_basic_name(name):
    if '[' in name:
        name, range = name.split('[', 1)
        assert range[-1] == ']', 'Malformed range'
        range = range[:-1]
        assert range, 'Unexpected empty range'
        return name, range
    else:
        return (name, None)


# Parses name of form
#
#   name-range = name [ "[" start ".." end "]" ]
#
def parse_name_range(name):
    name, range = parse_basic_name(name)
    if range:
        range = range.split('..', 1)
        range = (int(range[0]), int(range[1]))
    return (name, range)


# Parses name of form
#
#   name-index = name [ "[" index "]" ]
#
def parse_name_index(name):
    name, index = parse_basic_name(name)
    if index:
        index = int(index)
    return (name, index)


# Checks validity of direction field.
def check_direction(direction):
    assert direction in ['in', 'out', 'inout'], \
        'Invalid direction %s' % direction

# Checks that a direction refinement is valid
def check_signal_direction(signal_direction, direction):
    assert signal_direction == direction or signal_direction == 'inout', \
        'Can only refine direction of inout signal'

# Checks that the given range is valid for the signal and is the same direction
def check_signal_range(signal_range, range):
    # A bit complicated: range can be None, a single number, or a tuple.
    if range is None:
        assert signal_range is None, 'Must explitly specify range'
    elif isinstance(range, tuple):
        s_start, s_end = signal_range
        i_start, i_end = range
        if s_start <= s_end:
            assert s_start <= i_start <= i_end <= s_end
        else:
            assert s_start >= i_start >= i_end >= s_end
    else:
        s_start, s_end = signal_range
        if s_start <= s_end:
            assert s_start <= range <= s_end
        else:
            assert s_start >= range >= s_end



# The signals and used files have the same format of line:
#
#   direction = "in" | "out" | "inout"
#   signal-line = name-range direction ["no-pin"]
#
# If no-pin is specified then the constraints for this pin will not be created.
def parse_signals_line(line):
    names_range, direction, no_pin = split_line(line, 2, '')
    assert no_pin == '' or no_pin == 'no-pin', 'Invalid extra option'
    no_pin = no_pin == 'no-pin'
    check_direction(direction)
    names, range = parse_name_range(names_range)
    return names, range, direction, no_pin



# Load list of available signals on the target
def load_signals(signal_file):
    signals = {}

    for line, line_no in uncomment_file(signal_file, '#'):
        try:
            names, range, direction, no_pin = parse_signals_line(line)
            for name in expand_string(names):
                assert name not in signals, 'Repeated signal name %s' % name
                signals[name] = (range, direction, no_pin)
        except Exception as e:
            print('Error', e, 'on line', line_no)
            raise

    return signals


# Each line is a fully qualified signal name followed by a location identifier,
# an IO standard, and possibly others
#
#   locations = location-line*
#   location-line = name-index location [iostandard [others]]
#
def load_locations(pins_file):
    pins = {}
    for line, line_no in uncomment_file(pins_file, '#'):
        try:
            name, pin, iostandard, others = split_line(line, 2, '', '')
            name, index = parse_name_index(name)
            pins[(name, index)] = (pin, iostandard, others)
        except Exception as e:
            print('Error', e, 'on line', line_no)
            raise
    return pins


# Load list of signals to be used, cross check against available signals
def load_used_pins(signals, used_file):
    used_pins = []

    for line, line_no in uncomment_file(used_file, '#'):
        names, range_in, direction, no_pin_in = parse_signals_line(line)
        for name in expand_string(names):
            signal_range, signal_direction, no_pin = signals[name]
            check_signal_direction(signal_direction, direction)
            check_signal_range(signal_range, range_in)
            used_pins.append((name, range_in, direction, no_pin or no_pin_in))

    return used_pins


# Returns the appropriate type for the given range
def range_type(range, direction):
    logic = 'std_logic' if direction == 'inout' else 'std_ulogic'
    if range is None:
        return logic
    else:
        low, high = range
        updown = 'to' if low <= high else 'downto'
        return '%s_vector(%d %s %d)' % (logic, low, updown, high)


def map_pin_range(mapping):
    name, range, direction, no_pin = mapping
    return name, direction, range_type(range, direction)


# The entity maps all the used pins.
def write_entity(used_pins, entity_name, entity_file):
    with open(entity_file, 'w') as file:
        file.write(entity_template_head % locals())
        sep = ''
        for mapping in used_pins:
            name, direction, type = map_pin_range(mapping)
            file.write(entity_template_declaration % locals())
            sep = ';\n'
        file.write(entity_template_tail % locals())


def map_range(start, end):
    if start <= end:
        return range(start, end + 1)
    else:
        return range(start, end - 1, -1)

def map_used_pins(locations, mapping):
    name, range, direction, no_pin = mapping

    if no_pin:
        # The no_pin flag is used to indicate that the constrains for this pin
        # come from elsewhere.  This particularly applies to the MIG generated
        # IP for the AMC525: the IP has its own internal location contraints, so
        # these are not included here.
        pass
    elif range is None:
        location_info = locations[(name, range)]
        yield name, '', location_info
    else:
        for ix in map_range(*range):
            location_info = locations[(name, ix)]
            yield name, '[%d]' % ix, location_info


# Maps each used pin to the appropriate physical location.
def write_xdc(locations, used_pins, xdc_file):
    with open(xdc_file, 'w') as file:
        for mapping in used_pins:
            for name, index, info in map_used_pins(locations, mapping):
                location, iostandard, others = info
                file.write(xdc_location_line % locals())
                if iostandard:
                    file.write(xdc_iostandard_line % locals())
                if others == 'PULLUP':
                    file.write(xdc_pullup_line % locals())


def main():
    # Directory where the list of signals and pin assigments can be found
    board_dir = sys.argv[1]
    # File containing list of signals used
    used_file = sys.argv[2]
    # Name of entity to generate
    entity_name = sys.argv[3]
    # Location to place generated files
    target_dir = sys.argv[4]

    # We generate two files: a top level entity and a pin constrains file.
    entity_file = os.path.join(target_dir, '%s_entity.vhd' % entity_name)
    xdc_file = os.path.join(target_dir, '%s_pins.xdc' % entity_name)

    signals = load_signals(os.path.join(board_dir, 'signals'))
    locations = load_locations(os.path.join(board_dir, 'pins'))
    used = load_used_pins(signals, used_file)

    write_entity(used, entity_name, entity_file)
    write_xdc(locations, used, xdc_file)


main()
