# This file must be run in the target build directory

MUST_DEFINE += VIVADO
MUST_DEFINE += FPGA_PART

include $(PROJECT_TOP)/CONFIG
-include $(TARGET_DIR)/CONFIG

include $(FPGA_COMMON)/Makefile.common


# Command to run vivado
RUN_VIVADO = source $(VIVADO) && vivado $(VIVADO_EXTRA_ARGS)


TCL_DIR = $(FPGA_COMMON)/tcl

BOARD_DIR = $(PROJECT_TOP)/board
VHD_DIR = $(TARGET_DIR)/vhd
CONSTR_DIR = $(TARGET_DIR)/constr


VPATH += $(VHD_DIR)
VPATH += $(wildcard $(VHD_DIR)/*)

SOURCES := $(shell find $(VHD_DIR) -name \*.vhd)


MAKE_ENTITY = $(PYTHON) $(FPGA_COMMON)/tools/make_entity.py

BUILT_FILES += built/top_entity.vhd


# ------------------------------------------------------------------------------

default: fpga
fpga: $(TARGET).bit
.PHONY: default fpga


# Don't leave incomplete builds behind
.DELETE_ON_ERROR:


# ------------------------------------------------------------------------------
# Built files

# Generate top entity
built/top_entity.vhd: $(BOARD_DIR)/signals $(BOARD_DIR)/pins $(CONSTR_DIR)/used
	mkdir -p built
	cd built  &&  $(MAKE_ENTITY) $^ top

built/version.vhd: $(PROJECT_TOP)/VERSION
	$(TCLDIR)/make_version.sh $@

built/metadata.coe: prom_config
	mkdir -p built
	$(PYTHONDIR)/prom_data_creator.py --format coe $< >$@

# Other generated vhd files
built/%.vhd: %.py %.in
	$(PYTHON) $^ >$@


fpga-built: $(BUILT_FILES)
.PHONY: fpga-built


# ------------------------------------------------------------------------------
# Core build process:
#   interconnect.tcl -> interconnect.bd -> interconnect.vhd
#   + *.vhd -> $(TARGET).bit

# The interconnect block design needs the metadata array
interconnect/interconnect.bd: built/metadata.coe

# Load block designs from TCL sources

# Ugly and scary trick here.  We need the .bd target to be a repeated for (eg
# interconnect/interconnect.bd), but we can't match this directly using makefile
# patterns.  The trick is to use .SECONDEXPANSION ... which affects the whole of
# the rest of the makefile ... to pull out the correct dependency.
.SECONDEXPANSION:
%.bd: $$(notdir $$*).tcl
	$(RUN_VIVADO) -mode batch -source $(TCLDIR)/create_bd.tcl \
            -tclargs $(basename $(notdir $<)) -tclargs $<

# Build final target
$(TARGET).bit: $(BUILT_FILES) $(BLOCK_DESIGNS) $(SOURCES)
	ln -sf ./$(TARGET)/$(TARGET).runs/impl_1/top.bit $@
	mkdir -p reports checkpoints
	rm -rf $(TARGET)
	$(RUN_VIVADO) -mode batch -source $(TCL_DIR)/build_top.tcl \
            -tclargs $(TARGET_DIR) -tclargs $(TARGET) -tclargs $(FPGA_PART) \
            -tclargs '$(BLOCK_DESIGNS)'


# ------------------------------------------------------------------------------

# Run vivado on project
runvivado:
	$(RUN_VIVADO) -mode batch -source $(TCL_DIR)/run_vivado.tcl \
            -tclargs '$(BDDIR)' \
            -tclargs '$(TARGET)/$(TARGET).xpr'
.PHONY: runvivado


# vim: set filetype=make:
