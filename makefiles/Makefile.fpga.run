# Creates and runs FPGA build

include $(CONFIG)
include $(FPGA_COMMON)/makefiles/Makefile.core
include $(FPGA_COMMON)/makefiles/Makefile.common


# ------------------------------------------------------------------------------
# Create default settings for builds

BLOCK_DESIGNS =

CONSTR_FILES = built_dir/top_pins.xdc
CONSTR_FILES += $(wildcard $(CONSTR_DIR)/*.xdc)
CONSTR_TCL = $(wildcard $(FPGA_COMMON)/constr/*.tcl)

# By default add all files from the VHD directory and from the built directory
VHD_FILES += built_dir
VHD_FILES += $(VHD_DIR)
VHD_FILE_LIST =

DEFAULT = fpga

TOP_ENTITY = top
BUILT = top_entity.vhd

JOBS_COUNT = 6


# ------------------------------------------------------------------------------
# Overrides for defaults

# Pull in any project VHDL definitions
-include $(CALLER_TOP)/FPGA_DEFS

# Pick up board specific definitions
include $(BOARD_DIR)/CONFIG


# ------------------------------------------------------------------------------

$(call MUST_DEFINE,VIVADO)

# Command to run vivado
RUN_VIVADO = $(VIVADO) $(VIVADO_EXTRA_ARGS)


# ------------------------------------------------------------------------------
# Targets

# By default the default target is fpga which resolves to $(PROJECT_NAME).bit
default: $(DEFAULT)
.PHONY: default

project: $(PROJECT_NAME)
.PHONY: project

fpga: $(PROJECT_NAME).bit
.PHONY: fpga

runvivado:
.PHONY: runvivado

# Don't leave incomplete builds behind
.DELETE_ON_ERROR:


# If _TARGET is defined then add all target specific files to TARGET_FILES.
# These files will be linked into built_dir so that they can be found during the
# normal build.
ifdef _TARGET
    # Use eval to force expansion of the shell command right away
    $(eval TARGET_FILES += $(shell find $(VHD_DIR) -name \*$(_TARGET) -type f))
endif


# Common rules for built targets
include $(FPGA_COMMON)/makefiles/Makefile.built



# ------------------------------------------------------------------------------
# Vivado project building rules

# This is the Vivado project that will be created
_PROJECT = $(PROJECT_NAME)/$(PROJECT_NAME).xpr


# Arguments passed through to creation of project.  This list must match the
# environment variables read at the top of create_target.tcl
_CREATE_TARGET_ARGS += PROJECT_NAME
_CREATE_TARGET_ARGS += FPGA_PART
_CREATE_TARGET_ARGS += FPGA_TOP
#
_CREATE_TARGET_ARGS += COMMON_VHD
_CREATE_TARGET_ARGS += VHD_DIR
_CREATE_TARGET_ARGS += VHD_FILES
_CREATE_TARGET_ARGS += VHD_FILE_LIST
_CREATE_TARGET_ARGS += IP_DIR
#
_CREATE_TARGET_ARGS += BD_DIR
_CREATE_TARGET_ARGS += BLOCK_DESIGNS
_CREATE_TARGET_ARGS += CONSTR_FILES
_CREATE_TARGET_ARGS += CONSTR_TCL
#
_CREATE_TARGET_ARGS += TOP_ENTITY
_CREATE_TARGET_ARGS += TCL_SCRIPTS

# Arguments for building project
_BUILD_TARGET_ARGS += _PROJECT
_BUILD_TARGET_ARGS += JOBS_COUNT

# Arguments for running Vivado on project
_RUNVIVADO_ARGS += _PROJECT
_RUNVIVADO_ARGS += BD_DIR


# Build fresh Vivado project.  Note that we only add built files to the
# dependencies
$(_PROJECT): $(BUILT:%=built_dir/%)
	rm -rf $(PROJECT_NAME)
	ln -sf ./$(PROJECT_NAME)/$(PROJECT_NAME).runs/impl_1/top.bit \
            $(PROJECT_NAME).bit
	$(call EXPORT,$(_CREATE_TARGET_ARGS)) $(RUN_VIVADO) \
            -mode batch -source $(TCL_DIR)/create_target.tcl

# Using Vivado project run build to completion
$(PROJECT_NAME).bit: $(_PROJECT)
	$(call EXPORT,$(_BUILD_TARGET_ARGS)) $(RUN_VIVADO) \
            -mode batch -source $(TCL_DIR)/build_target.tcl

# Run Vivado on project
runvivado:
	TMP=$(CURDIR) $(call EXPORT,$(_RUNVIVADO_ARGS)) $(RUN_VIVADO) \
            -mode batch -source $(TCL_DIR)/run_vivado.tcl
# Note the rather odd TMP= workaround: this needs to be set when running the
# Vivado hardware manager, as otherwise the application cs_server fails to run.
# It appears to need somewhere where it can dump executable temporary files!


# Allow any extra rules that need to come late to be included here
-include $(FPGA_TOP)/FPGA_RULES

# vim: set filetype=make:
