# This file must be run in the target build directory

# Discover the path to this directory
HERE := $(abspath $(dir $(lastword $(MAKEFILE_LIST)))/..)

MUST_DEFINE += VIVADO
MUST_DEFINE += FPGA_PART

include $(PROJECT_TOP)/CONFIG
include $(HERE)/makefiles/Makefile.common

# Compute board directory from BOARD_DEFS definition.  By default we look inside
# our boards directory for board definitions, but BOARD_DEFS can be an absolute
# path instead if required.
$(call COMPUTE_PATH,BOARD_DEFS,BOARD_DIR,$(HERE)/boards)


# Can make these optional in the end
include $(BOARD_DIR)/CONFIG
-include $(TARGET_DIR)/CONFIG


# Command to run vivado
RUN_VIVADO = source $(VIVADO) && vivado $(VIVADO_EXTRA_ARGS)


TCL_DIR = $(HERE)/tcl
TOOLS_DIR = $(HERE)/tools

VHD_DIR = $(TARGET_DIR)/vhd
CONSTR_DIR = $(TARGET_DIR)/constr
BD_DIR = $(TARGET_DIR)/bd


VPATH += $(VHD_DIR)
VPATH += $(wildcard $(VHD_DIR)/*)
VPATH += $(BD_DIR)

SOURCES := $(shell find $(VHD_DIR) -name \*.vhd)


BUILT_FILES += top_entity.vhd


# ------------------------------------------------------------------------------

default: fpga
fpga: $(TARGET).bit
.PHONY: default fpga


# Don't leave incomplete builds behind
.DELETE_ON_ERROR:


# ------------------------------------------------------------------------------
# Built files

# Generate top entity
built/top_entity.vhd: $(BOARD_DIR) $(CONSTR_DIR)/used
	mkdir -p built
	cd built  &&  $(TOOLS_DIR)/make_entity $^ top

built/version.vhd: $(PROJECT_TOP)/VERSION
	$(TCLDIR)/make_version.sh $@

built/metadata.coe: $(TARGET_DIR)/prom_config
	mkdir -p built
	$(TOOLS_DIR)/prom_data_creator --format coe $< >$@

# Other generated vhd files
built/%.vhd: %.py %.in
	$(PYTHON) $^ >$@


fpga-built: $(BUILT_FILES:%=built/%)
.PHONY: fpga-built


# ------------------------------------------------------------------------------
# Core build process:
#   interconnect.tcl -> interconnect.bd -> interconnect.vhd
#   + *.vhd -> $(TARGET).bit

# The interconnect block design needs the metadata array
interconnect/BD_DONE: built/metadata.coe


# Load block designs from TCL sources
%/BD_DONE: $(BD_DIR)/%.tcl
	echo $$LM_LICENSE_FILE
	$(RUN_VIVADO) -mode batch -source $(TCL_DIR)/create_bd.tcl \
            -tclargs $* -tclargs $< -tclargs $(FPGA_PART)
	touch $@


# Build final target
$(TARGET).bit: $(BUILT_FILES:%=built/%) $(BLOCK_DESIGNS:%=%/BD_DONE) $(SOURCES)
	ln -sf ./$(TARGET)/$(TARGET).runs/impl_1/top.bit $@
	mkdir -p reports checkpoints
	rm -rf $(TARGET)
	$(RUN_VIVADO) -mode batch -source $(TCL_DIR)/build_top.tcl \
            -tclargs $(TARGET_DIR) -tclargs $(TARGET) -tclargs $(FPGA_PART) \
            -tclargs '$(BLOCK_DESIGNS)'


# ------------------------------------------------------------------------------

# Run vivado on project
runvivado:
	$(RUN_VIVADO) -mode batch -source $(TCL_DIR)/run_vivado.tcl \
            -tclargs '$(BD_DIR)' \
            -tclargs '$(TARGET)/$(TARGET).xpr'
.PHONY: runvivado


# vim: set filetype=make:
