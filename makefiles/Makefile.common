# Flag all of these symbols so that an error is generated if an attempt is make
# to use them when they're not defined.
$(call MUST_DEFINE,PROJECT_NAME)     # Name of project
$(call MUST_DEFINE,BOARD)            # Specifies board

# The following symbols must be set by the .delegate caller, but check them
# anyway
$(call MUST_DEFINE,FPGA_COMMON)
$(call MUST_DEFINE,CALLER_TOP)
$(call MUST_DEFINE,FPGA_TOP)
$(call MUST_DEFINE,CONFIG)
$(call MUST_DEFINE,CONFIG_TOP)

# ------------------------------------------------------------------------------

PYTHON ?= python

# Convert license file from space separated to : separated list
SPACE := $(subst ,, )
export LM_LICENSE_FILE := $(subst $(SPACE),:,$(strip $(LM_LICENSE_FILE)))

COMMON_VHD = $(FPGA_COMMON)/vhd
COMMON_SIM = $(FPGA_COMMON)/sim/common
TOOLS_DIR = $(FPGA_COMMON)/tools
TCL_DIR = $(FPGA_COMMON)/tcl

# If BOARD contains a / assume it is a path to an external board directory,
# otherwise assume it's one of the common boards
ifeq (,$(findstring /,$(BOARD)))
    BOARD_DIR = $(FPGA_COMMON)/boards/$(BOARD)
else
    BOARD_DIR = $(BOARD)
endif

VHD_DIR = $(FPGA_TOP)/vhd
CONSTR_DIR = $(FPGA_TOP)/constr$(_TARGET)
BD_DIR = $(FPGA_TOP)/bd$(_TARGET)

# vim: set filetype=make:
